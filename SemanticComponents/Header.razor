@using Microsoft.JSInterop
@inject IJSRuntime JS;

@switch(Type)
{
	case HeaderType.H1:
		<h1 @ref="header" @onblur="HandleBlur" class="@ClassesCombined" contenteditable="@Editable" @attributes=Attributes>@ChildContent</h1>
	break;
	case HeaderType.H2:
		<h2 @ref="header" @onblur="HandleBlur" class="@ClassesCombined" contenteditable="@Editable" @attributes=Attributes>@ChildContent</h2>
	break;
	case HeaderType.H3:
		<h3 @ref="header" @onblur="HandleBlur" class="@ClassesCombined" contenteditable="@Editable" @attributes=Attributes>@ChildContent</h3>
	break;
	case HeaderType.H4:
		<h4 @ref="header" @onblur="HandleBlur" class="@ClassesCombined" contenteditable="@Editable" @attributes=Attributes>@ChildContent</h4>
	break;
	case HeaderType.H5:
		<h5 @ref="header" @onblur="HandleBlur" class="@ClassesCombined" contenteditable="@Editable" @attributes=Attributes>@ChildContent</h5>
	break;
}


@code
{
	ElementReference? header;

	public enum HeaderType
	{
		H1,
		H2,
		H3,
		H4,
		H5
	}

	[Parameter]
	public EventCallback<ChangeEventArgs> ValueChanged { get; set; }

	async Task HandleBlur()
	{
		if(header is null)
		{
			return;
		}

		var value = await JS.InvokeAsync<string>("getValueOfContentEditable", header);

		await ValueChanged.InvokeAsync(new ChangeEventArgs() { Value = value });
	}

	string ClassesCombined => $"ui header {Classes}";

	[Parameter]
	public bool Editable { get; set; } = false;

	[Parameter]
	public string Classes { get; set; } = string.Empty;

	[Parameter]
	public HeaderType Type { get; set; } = HeaderType.H1;

	[Parameter]
	public RenderFragment ChildContent { get; set; }

	[Parameter(CaptureUnmatchedValues = true)]
	public IDictionary<string,object> Attributes { get; set; }
}