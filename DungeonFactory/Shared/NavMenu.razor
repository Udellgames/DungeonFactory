@using System.Collections.ObjectModel
@using DungeonFactory.Components
@using DungeonFactory.Model
@implements IDisposable;
@inject DocumentService DocumentService;
@inject IJSRuntime JS;
@inject NavigationManager NavigationManager;

<div class="ui left inverted sidebar visible">
    
    <a class="ui inverted fluid button" @onclick="NewPage">
        <i class="plus icon"></i>
        Create New
    </a>

    <TreeView Nodes="Nodes"></TreeView>

</div>

<div class="ui top inverted fixed menu">
    <a id="itemCloser" class="item close">
        <i class="sidebar icon"></i>
    </a>
</div>

@code {
    private bool collapseNavMenu = true;

    private string? NavMenuCssClass => collapseNavMenu ? "collapse" : null;

    private void ToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;
    }

    private void Delete(Document document)
    {
        DocumentService.Delete(document);
        Documents = DocumentService.AllRecords.ToList();
        StateHasChanged();
    }

    private void NewPage()
    {
        var id = DocumentService.Insert(Document.CreateDocument());
        Documents = DocumentService.AllRecords.ToList();
        NavigationManager.NavigateTo($"Document/{id.AsGuid}");
        StateHasChanged();
    }

    public List<Node> Nodes => Documents.Select(document=> new Node(document)).ToList();

    public ICollection<Model.Document> Documents { get; set; } = new Collection<Model.Document>();

    protected override void OnInitialized()
    {
        base.OnInitialized();

        Documents = DocumentService.AllRecords.ToList();

        DocumentService.CollectionChanged += HandleCollectionChanged;
    }

    void HandleCollectionChanged(object? sender, EventArgs e)
    {
        Documents = DocumentService.AllRecords.ToList();
        StateHasChanged();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if(!firstRender)
        {
            return;
        }

        await JS.InvokeVoidAsync("initialiseMenu");
    }

    public void Dispose()
    {
        DocumentService.CollectionChanged -= HandleCollectionChanged;
    }
}