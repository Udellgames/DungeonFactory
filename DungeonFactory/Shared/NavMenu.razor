@using System.Collections.ObjectModel
@using DungeonFactory.Model
@inject DocumentService DocumentService;
@inject IJSRuntime JS;

<div class="ui left vertical menu sidebar">

    <a class="item close">
        <i class="sidebar icon"></i>
        Hide
    </a>
    
    <a class="item" @onclick="NewPage">
        <i class="sidebar icon"></i>
        New Page
    </a>

    @foreach(var document in Documents)
    {
        <NavLink class="item nav-link" href="@($"Document/{document.Id}")" Match="NavLinkMatch.All" >
            @document.Title
        </NavLink>
    }
</div>

<div class="ui top fixed menu">
    <a id="itemCloser" class="item close">
        <i class="sidebar icon"></i>
    </a>
</div>

@code {
    private bool collapseNavMenu = true;

    private string? NavMenuCssClass => collapseNavMenu ? "collapse" : null;

    private void ToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;
    }

    private void NewPage()
    {
        DocumentService.Insert(Document.CreateDocument());
        Documents = DocumentService.AllRecords.ToList();
        StateHasChanged();
    }

    public ICollection<Model.Document> Documents { get; set; } = new Collection<Model.Document>();

    protected override void OnInitialized()
    {
        base.OnInitialized();

        Documents = DocumentService.AllRecords.ToList();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		if(!firstRender)
		{
			return;
		}

		await JS.InvokeVoidAsync("initialiseMenu");
	}
}